###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007-2022  IPFire Team  <info@ipfire.org>                     #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

VER        = 14.2.0

GMP_VER    = 6.3.0
MPFR_VER   = 4.2.1
MPC_VER    = 1.3.1

THISAPP    = gcc-$(VER)
DL_FILE    = $(THISAPP).tar.xz
DL_FROM    = $(URL_IPFIRE)
DIR_APP    = $(DIR_SRC)/$(THISAPP)

ifeq "$(PASS)" "1"
CFLAGS    := $(patsubst -march=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mfpu=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mtune=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mfloat-abi=%,,$(CFLAGS))
CFLAGS    := $(filter-out -fexceptions,$(CFLAGS))

CFLAGS    := $(patsubst -mindirect-branch=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mbranch-protection=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mfunction-return=%,,$(CFLAGS))
CFLAGS    := $(patsubst -fstack-clash-protection,,$(CFLAGS))
CFLAGS    := $(patsubst -fcf-protection,,$(CFLAGS))
endif

CXXFLAGS  := $(CFLAGS)

# Normal build or $(TOOLS_DIR) build.
#
ifeq "$(ROOT)" ""
  TARGET = $(DIR_INFO)/$(THISAPP)
  EXTRA_CONFIG = \
	--prefix=/usr \
	--libexecdir=/usr/lib \
	--enable-shared \
	--enable-threads=posix \
	--enable-__cxa_atexit \
	--enable-clocale=gnu \
	--enable-languages=c,c++ \
	--disable-bootstrap \
	--disable-nls
  EXTRA_MAKE =
  EXTRA_INSTALL =
ifeq "$(PASS)" "A"
  TARGET = $(DIR_INFO)/$(THISAPP)-libatomic
  ROOTFILE_APPEND = "-libatomic"
endif
else
ifeq "$(PASS)" "1"
  TARGET = $(DIR_INFO)/$(THISAPP)-tools1
  EXTRA_CONFIG = \
	--target=$(CROSSTARGET) \
	--prefix=$(TOOLS_DIR) \
	--with-sysroot=$(ROOT) \
	--with-local-prefix=$(TOOLS_DIR) \
	--with-native-system-header-dir=$(TOOLS_DIR)/include \
	--with-glibc-version=2.11 \
	--disable-nls \
	--disable-shared \
	--disable-multilib \
	--disable-decimal-float \
	--disable-threads \
	--disable-libatomic \
	--disable-libmudflap \
	--disable-libssp \
	--disable-libmpx \
	--disable-libgomp \
	--disable-libquadmath \
	--disable-libstdc++-v3 \
	--disable-libvtv \
	--disable-libcilkrts \
	--disable-libitm \
	--disable-libsanitizer \
	--with-newlib \
	--without-headers \
	--without-ppl \
	--without-cloog \
	--enable-languages=c,c++
  EXTRA_MAKE =
  EXTRA_INSTALL =
else
ifeq "$(PASS)" "2"
  TARGET = $(DIR_INFO)/$(THISAPP)-tools2
  EXTRA_ENV = \
	CC="$(CROSSTARGET)-gcc" \
	CXX="$(CROSSTARGET)-g++" \
	AR="$(CROSSTARGET)-ar" \
	RANLIB="$(CROSSTARGET)-ranlib"
  EXTRA_CONFIG = \
	--build=$(BUILDTARGET) \
	--host=$(BUILDTARGET) \
	--prefix=$(TOOLS_DIR) \
	--with-local-prefix=$(TOOLS_DIR) \
	--with-native-system-header-dir=$(TOOLS_DIR)/include \
	--disable-bootstrap \
	--enable-languages=c,c++ \
	--disable-libstdcxx-pch \
	--disable-multilib \
	--disable-libgomp
  EXTRA_MAKE =
  EXTRA_INSTALL =
else
  # PASS=L # libstdc++-v3
  TARGET = $(DIR_INFO)/$(THISAPP)-libstdc++
  EXTRA_ENV = \
	CC="$(CROSSTARGET)-gcc" \
	AR="$(CROSSTARGET)-ar" \
	RANLIB="$(CROSSTARGET)-ranlib"
  EXTRA_CONFIG = \
	--host=$(CROSSTARGET) \
	--prefix=$(TOOLS_DIR) \
	--with-sysroot=$(ROOT) \
	--disable-shared \
	--disable-nls \
	--disable-libstdcxx-threads \
	--disable-libstdcxx-pch \
	--with-gxx-include-dir=$(TOOLS_DIR)/$(CROSSTARGET)/include/c++/$(VER)
  EXTRA_MAKE =
  EXTRA_INSTALL =
endif
endif
endif

ifeq "$(BUILD_ARCH)" "aarch64"
	EXTRA_CONFIG += \
		--enable-standard-branch-protection
endif

ifeq "$(BUILD_ARCH)" "riscv64"
	EXTRA_CONFIG += \
		--with-arch=rv64gc \
		--with-abi=lp64d
endif

EXTRA_CONFIG += \
	--disable-multilib \
	--with-bugurl=https://bugzilla.ipfire.org \
	--disable-libunwind-exceptions \
	--enable-gnu-unique-object

export XCFLAGS = $(CFLAGS)
export TCFLAGS = $(CFLAGS)

###############################################################################
# Top-level Rules
###############################################################################

objects = $(DL_FILE) \
	gmp-$(GMP_VER).tar.xz \
	mpfr-$(MPFR_VER).tar.xz \
	mpc-$(MPC_VER).tar.gz

$(DL_FILE) = $(DL_FROM)/$(DL_FILE)
gmp-$(GMP_VER).tar.xz = $(DL_FROM)/gmp-$(GMP_VER).tar.xz
mpfr-$(MPFR_VER).tar.xz = $(DL_FROM)/mpfr-$(MPFR_VER).tar.xz
mpc-$(MPC_VER).tar.gz = $(DL_FROM)/mpc-$(MPC_VER).tar.gz

$(DL_FILE)_BLAKE2 = 87baf2a06dfa75d8fb6cd62c747ef1f57d3b9bbbe33a360d9ed3de4b4dbeaa8d920504c67e409bd9863414202c14fd854b46108e984418171205119216d03d3b
gmp-$(GMP_VER).tar.xz_BLAKE2	= a865129e2b3f634ec5bad7f97ed89532e43f5662ac47a7d8ab7f0df8c9f8d0886bd984651422e2573c2163bca69c0547c248147ec90880accbd53db97dc0ddee
mpfr-$(MPFR_VER).tar.xz_BLAKE2	= ad69f53bc910294647523e7613b18a683f1d0f3dd994168ab2a46b66d0371ffa9b8e7cb59495f898470aea69d343e83fc722f11babe4af7b3a12665a1e65860c
mpc-$(MPC_VER).tar.gz_BLAKE2	= 76434e6f8830af3571836d51576bfebbc9701e9bbb5c4686f134081cd96cd90ae02f7ff42bf9e3957c7a7ba92b6b2d9cdabe18f0269271147521cd7f6a2d551c

install : $(TARGET)

check : $(patsubst %,$(DIR_CHK)/%,$(objects))

download :$(patsubst %,$(DIR_DL)/%,$(objects))

b2 : $(subst %,%_BLAKE2,$(objects))

###############################################################################
# Downloading, checking, b2sum
###############################################################################

$(patsubst %,$(DIR_CHK)/%,$(objects)) :
	@$(CHECK)

$(patsubst %,$(DIR_DL)/%,$(objects)) :
	@$(LOAD)

$(subst %,%_BLAKE2,$(objects)) :
	@$(B2SUM)

###############################################################################
# Installation Details
###############################################################################

$(TARGET) : $(patsubst %,$(DIR_DL)/%,$(objects))
	@$(PREBUILD)
	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build && cd $(DIR_SRC) && tar axf $(DIR_DL)/$(DL_FILE)
	@mkdir $(DIR_SRC)/gcc-build

	cd $(DIR_APP) && sed -i 's/install_to_$$(INSTALL_DEST) //' libiberty/Makefile.in
	cd $(DIR_APP) && sed -i gcc/Makefile.in \
		-e 's@\./fixinc\.sh@-c true@' \
		-e 's/^T_CFLAGS =$$/& -fomit-frame-pointer/'

	# Build gmp and mpfr internally in toolchain.
	cd $(DIR_APP) && tar xfa $(DIR_DL)/gmp-$(GMP_VER).tar.xz
	cd $(DIR_APP) && mv -v gmp-$(GMP_VER) gmp
	cd $(DIR_APP) && tar xfa $(DIR_DL)/mpfr-$(MPFR_VER).tar.xz
	cd $(DIR_APP) && mv -v mpfr-$(MPFR_VER) mpfr
	cd $(DIR_APP) && tar xfa $(DIR_DL)/mpc-$(MPC_VER).tar.gz
	cd $(DIR_APP) && mv -v mpc-$(MPC_VER) mpc

ifeq "$(TOOLCHAIN)" "1"

	for file in $$(find $(DIR_APP)/gcc/config -name linux64.h -o -name linux.h \
			-o -name sysv4.h -o -name linux-eabi.h -o -name linux-elf.h -o -name aarch64-linux.h); do \
		echo "Processing $${file}..."; \
		sed -i $${file} \
			-e 's@/lib\(64\)\?\(32\)\?/ld@$(TOOLS_DIR)&@g' \
			-e 's@/usr@$(TOOLS_DIR)@g'; \
		echo '#undef STANDARD_STARTFILE_PREFIX_1' >> $${file}; \
		echo '#undef STANDARD_STARTFILE_PREFIX_2' >> $${file}; \
		echo '#define STANDARD_STARTFILE_PREFIX_1 "$(TOOLS_DIR)/lib/"' >> $${file}; \
		echo '#define STANDARD_STARTFILE_PREFIX_2 ""' >> $${file}; \
	done
endif

ifeq "$(PASS)" "L"
	# libstdc++ pass
	cd $(DIR_SRC)/gcc-build && \
		$(EXTRA_ENV) \
		$(DIR_APP)/libstdc++-v3/configure \
			$(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_MAKE) $(MAKETUNING)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
else
ifeq "$(PASS)" "A"
	# libatomic pass
	cd $(DIR_SRC)/gcc-build && \
		$(EXTRA_ENV) \
		$(DIR_APP)/libatomic/configure \
			$(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
else
	# The actual build.
	cd $(DIR_SRC)/gcc-build && \
		$(EXTRA_ENV) \
		$(DIR_APP)/configure \
			$(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_MAKE) $(MAKETUNING)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
endif
endif

ifeq "$(TOOLCHAIN)" "1"
 ifeq "$(PASS)" "1"
	# Fix limits.h
	cd $(DIR_APP) && cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
		`dirname $$($(TOOLS_DIR)/bin/$(CROSSTARGET)-gcc -print-libgcc-file-name)`/include/limits.h

	ln -svf libgcc.a $$($(TOOLS_DIR)/bin/$(CROSSTARGET)-gcc -print-libgcc-file-name | sed 's/libgcc/&_eh/')
 endif

 ifeq "$(PASS)" "2"
	ln -svf gcc $(TOOLS_DIR)/bin/cc
	# remove gdb python files from libdir
	rm -rf $(TOOLS_DIR)/lib/*-gdb.py
 endif

 ifeq "$(PASS)" "L"
	# Workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70936
	sed -e "s/^#include_next/#include/" -i $(TOOLS_DIR)/$(CROSSTARGET)/include/c++/$(VER)/cstdlib
 endif

else # NON-TOOLCHAIN
	ln -svf ../usr/bin/cpp /lib
	ln -svf gcc /usr/bin/cc
	# remove gdb python files from libdir
	rm -rf /usr/lib/*-gdb.py
endif

	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build
	@$(POSTBUILD)
